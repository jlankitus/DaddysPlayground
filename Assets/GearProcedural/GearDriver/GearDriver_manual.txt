GearDriver.cs
-------------


Add this script to a Procedural Gear to drive it.
You also can add this script to a cylinder (or any other GameObject) to use it as a shaft.

Gear Driver Options:

[is Motor]
This is the gear object that drives all other gears/shafts.

[Motor speed]
If "is Motor" is checked, you can see the "Motor speed" property.
Here you set the speed of the motor. This is in rounds per minute.

Use 'motorSpeedRPM' to set the speed of the motor gear from other scripts or playmaker 
 during gameplay.

 Read or Set by Script:
  gd = (GearDriver)anotherGameObject.GetComponent(typeof(GearDriver));
  gd.motorSpeedRPM = 15.0f;
  float speed = gd.motorSpeedRPM;
	
 For Playmaker:
  Add a FSM to the motor gear game object.
  In a State create an Action -> Unity Object -> Set Property
  As Target object select 'gear'.
  As Property select 'motorSpeedRPM'
  Then set a value for the speed or select another variable you stored in playmaker.

[is Shaft]
used to mark the object as a shaft.
will be checked automaticly on start, if the game object has no "Procedural Gear" script attached.
You can create a cylinder and add the gear driver script, then you have a shaft ready to work with
the other gears.

[Live Update]
A gear marked as "is Motor" have the option "Live Update".
If "Live Update" is checked, every change to the gears will affect the transmission in real time (every frame).

[Update Speed Once]
This Button is enabled if "Update Speed" is deactivated.
With "Update Speed Once" you set your changes once, after you setup gears and speed.

[Outputs connected]
This is a list, where you add the connection to other gears or shafts.
You set where the power is going to. Not where the power comes from.
Drag and Drop the gears you want to drive from scene view onto this list.


There are some public methods you can call from other scripts or playmaker to
connect and disconnect gears at runtime:

!!! connect/disconnect at runtime only works with "live update" on the motor gear has to be set true !!!



- Connect a gear by its gearDriver script as reference

    Call from other scripts: anotherGameObject.GetComponent<GearDriver>().ConnectGear(gearDriver);


- Disconnects all gears from the "connected outputs" lists of this gear

    Call from other scripts: anotherGameObject.GetComponent<GearDriver>().DisconnectAllGears();


- Remove a gear from the "Connected Outputs" list (with the gearDriver script as reference)

    Call from other scripts: anotherGameObject.GetComponent<GearDriver>().DisconnectGear(gearDriver);


- Remove a gear from the "Connected Outputs" list of this gear by index

    Call from other scripts: anotherGameObject.GetComponent<GearDriver>().DisconnectGearByIndex(5);


- Disconnects this gear from the "Connected Outputs" lists of all other gears

    Call from other scripts: anotherGameObject.GetComponent<GearDriver>().DisconnectFromAllOther();


- Disconnects a gear from the connected output lists of all other gears by its name

    Call from other scripts: GameObject.FindObjectOfType<GearDriver>().DisconnectFromAllByName("NameOfGearToDisconnect");


- Connects a gear to another by their names

    Call from other scripts: GameObject.Find("gearThatDrives").GetComponent<GearDriver>().ConnectGearByName("GearToConnect");

- Disconnects a gear from another by their names

     Call from other scripts: GameObject.Find("gearThatDrives").GetComponent<GearDriver>().DisconnectGearByName("GearToDisconnect");




Simple Gear Driver Script by Alexander Schlottau, Hamburg, Germany
Thanks for using.